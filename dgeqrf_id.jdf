extern "C" %{
/*
 * Copyright (c) 2010-2016 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @generated d Sat Aug 13 16:38:52 2016
 *
 */
#include <data_dist/matrix/matrix.h>
#include <dague/private_mempool.h>
#include <lapacke.h>
#include <core_blas.h>

#if defined(DAGUE_HAVE_RECURSIVE)
#include <data_dist/matrix/subtile.h>
#include <dague/recursive.h>
#endif

#if defined(DAGUE_HAVE_CUDA)
#include <cores/dplasma_dcores.h>
#endif  /* defined(DAGUE_HAVE_CUDA) */

%}

dataA1 [type = "dague_ddesc_t *"]
dataA2 [type = "dague_ddesc_t *"]
dataT2 [type = "dague_ddesc_t *" aligned=dataA2]
ib     [type = "int"]
optid  [type = "int"]

p_work [type = "dague_memory_pool_t *" size = "(sizeof(double)*ib*descT2.nb)"]
p_tau  [type = "dague_memory_pool_t *" size = "(sizeof(double)   *descT2.nb)"]

descA1  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA1)"]
descA2  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA2)"]
descT2  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataT2)"]

KT      [type = "int" hidden = on default = "descA1.nt-1" ]
smallnb [type = "int" hidden = on default = "descA2.nb" ]

A1_in( m, n )
  m = 0 .. KT
  n = m .. descA1.nt-1

:dataA1(m, n)

READ A <- dataA1(m, n)
       -> ( m == n ) ? A1 geqrf_dtsqrt( m, 0 )       [type = UPPER_TILE]
       -> ( m <  n ) ? A1 geqrf_dtsmqr( m, 0, n )

BODY
{
    /* Nothing */
}
END

A2_in( m, n )
  m = 0    .. descA2.mt-1
  nmin = (optid ? m : 0)
  n = nmin .. descA2.nt-1

:dataA2(m, n)

RW   A <- dataA2(m, n)
       -> ( n == nmin ) ? A2 geqrf_dtsqrt( nmin, m )
       -> ( n != nmin ) ? A2 geqrf_dtsmqr( nmin, m, n )

BODY
{
    int tempmm = (m == (descA2.mt-1)) ? (descA2.m - m * descA2.mb) : descA2.mb;
    int tempnn = (n == (descA2.nt-1)) ? (descA2.n - n * descA2.nb) : descA2.nb;
    int ldam = BLKLDD( descA2, m );

    if (m == n) {
        LAPACKE_dlaset_work(
            LAPACK_COL_MAJOR, 'A', tempmm, tempnn,
            0., 1., A, ldam );
    } else {
        LAPACKE_dlaset_work(
            LAPACK_COL_MAJOR, 'A', tempmm, tempnn,
            0., 0., A, ldam );
    }
}
END

geqrf_dtsqrt_out_A1(k) [profile = off]
  k = 0 .. KT
  mmax = inline_c %{ return optid ? k : descA2.mt-1; %}

  : dataA1(k, k)

  RW A1 <- A1 geqrf_dtsqrt(k, mmax) [type = UPPER_TILE]
        -> dataA1(k, k)             [type = UPPER_TILE]
BODY
{
    /* nothing */
}
END

/**************************************************
 *                    geqrf_dtsqrt                *
 **************************************************/
geqrf_dtsqrt(k,m)
  /* Execution space */
  k    = 0 .. KT
  mmax = inline_c %{ return optid ? k : descA2.mt-1; %}
  m    = 0 .. mmax

  : dataA2(m, k)

  RW   A1 <- ( m == 0 ) ? A A1_in(k, k) : A1 geqrf_dtsqrt(k, m-1)  [type = UPPER_TILE]
          -> ( m == mmax ) ? A1 geqrf_dtsqrt_out_A1(k)             [type = UPPER_TILE]
          -> ( m != mmax ) ? A1 geqrf_dtsqrt(k, m+1)               [type = UPPER_TILE]

  RW   A2 <- (!optid && (k == 0)) || ( optid && (k == m)) ? A A2_in(m, k)
          <- A2 geqrf_dtsmqr(k-1, m, k)

          /* <- !optid & (k == 0) & (m <  descA.mt) ? A A1_in(m,  k) */
          /* <- !optid & (k == 0) & (m >= descA.mt) ? A A2_in(m2, k) */
          /* <- !optid & (k != 0) ? A2 dtsmqr(k-1, m, k)             */

          /* <- optid & (m <  descA.mt) & (k == 0)  ? A  A1_in(m,  k)      */
          /* <- optid & (m <  descA.mt) & (k != 0)  ? A2 dtsmqr(k-1, m, k) */
          /* <- optid & (m >= descA.mt) & (k == m2) ? A  A2_in(m2, k)      */
          /* <- optid & (m >= descA.mt) & (k != m2) ? A2 dtsmqr(k-1, m, k) */

          -> (k < (descA2.nt-1)) ? V geqrf_dtsmqr(k, m, (k+1)..(descA2.nt-1))
          -> dataA2(m, k)

  RW   T  <- dataT2(m, k)                                                     [type = LITTLE_T]
          -> dataT2(m, k)                                                     [type = LITTLE_T]
          -> (k < (descA2.nt-1)) ? T geqrf_dtsmqr(k, m, (k+1)..(descA2.nt-1)) [type = LITTLE_T]

    /* Priority */
; (descA1.mt-k)*(descA1.mt-k)*(descA1.mt-k)

BODY [type=RECURSIVE]
{
    int tempmm = (m == (descA2.mt-1)) ? (descA2.m - m * descA2.mb) : descA2.mb;
    int tempkn = (k == (descA2.nt-1)) ? (descA2.n - k * descA2.nb) : descA2.nb;
    int ldak = BLKLDD( descA2, k );
    int ldam = BLKLDD( descA2, m );

    if (tempmm > smallnb) {
        subtile_desc_t *small_descA1;
        subtile_desc_t *small_descA2;
        subtile_desc_t *small_descT;
        dague_handle_t *dague_dtsqrt;


        small_descA1 = subtile_desc_create( &(descA2), k, k,
                                            dague_imin(descA2.mb, ldak), smallnb,
                                            0, 0, tempkn, tempkn );
        small_descA2 = subtile_desc_create( &(descA2), m, k,
                                            dague_imin(descA2.mb, ldam), smallnb,
                                            0, 0, tempmm, tempkn );
        small_descT  = subtile_desc_create( &(descT2), m, k,
                                            ib, smallnb,
                                            0, 0, ib, tempkn );

        small_descA1->mat = A1;
        small_descA2->mat = A2;
        small_descT->mat  = T;

        /* dague_object */
        dague_dtsqrt = dplasma_dgeqrfr_tsqrt_New((tiled_matrix_desc_t *)small_descA1,
                                                 (tiled_matrix_desc_t *)small_descA2,
                                                 (tiled_matrix_desc_t *)small_descT,
                                                 p_work, p_tau );

        /* recursive call */
        dague_recursivecall( context, (dague_execution_context_t*)this_task,
                             dague_dtsqrt, dplasma_dgeqrfr_tsqrt_Destruct,
                             3, small_descA1, small_descA2, small_descT );

        return DAGUE_HOOK_RETURN_ASYNC;
    }
    else
        return DAGUE_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempmm = (m == (descA2.mt-1)) ? (descA2.m - m * descA2.mb) : descA2.mb;
    int tempkn = (k == (descA2.nt-1)) ? (descA2.n - k * descA2.nb) : descA2.nb;
    int ldak = BLKLDD( descA2, k );
    int ldam = BLKLDD( descA2, m );

#if !defined(DAGUE_DRY_RUN)

    void *p_elem_A = dague_private_memory_pop( p_tau );
    void *p_elem_B = dague_private_memory_pop( p_work );

    CORE_dtsqrt(tempmm, tempkn, ib,
                A1 /* dataA1(k,k) */, ldak,
                A2 /* dataA2(m,k) */, ldam,
                T  /* dataT2(m,k) */, descT2.mb,
                p_elem_A, p_elem_B );

    dague_private_memory_push( p_tau,  p_elem_A );
    dague_private_memory_push( p_work, p_elem_B );

#endif  /* !defined(DAGUE_DRY_RUN) */
}
END

geqrf_dtsmqr_out_A1(k, n) [profile = off]
  k = 0   .. descA1.nt-2
  n = k+1 .. descA1.nt-1
  mmax = inline_c %{ return optid ? k : descA2.mt-1; %}

  : dataA1(k, n)

  RW A1 <- A1 geqrf_dtsmqr(k, mmax, n)
        -> dataA1(k, n)
BODY
{
    /* nothing */
}
END


/**************************************************
 *                    geqrf_dtsmqr                      *
 **************************************************/
geqrf_dtsmqr(k, m, n)
  /* Execution space */
  k = 0     .. inline_c %{ return dague_imin(KT,(descA1.nt-2)); %}
  mmax = inline_c %{ return optid ? k : descA2.mt-1; %}
  m = 0     .. mmax
  n = (k+1) .. (descA1.nt-1)

  : dataA2(m, n)

  RW   A1 <- ( m == 0    ) ? A A1_in(k, n) : A1 geqrf_dtsmqr(k, m-1, n)
          -> ( m == mmax ) ? A1 geqrf_dtsmqr_out_A1(k, n) : A1 geqrf_dtsmqr(k, m+1, n)

  RW   A2 <- (!optid & (k == 0)) || (optid & (k == m)) ? A A2_in(m, n)
          <- A2 geqrf_dtsmqr(k-1, m, n)

          -> ((k+1) == n) ? A2 geqrf_dtsqrt(k+1, m)       /* Next column */
          -> ((k+1) <  n) ? A2 geqrf_dtsmqr(k+1, m, n)    /* trailing submatrix */

  READ V  <- A2 geqrf_dtsqrt(k, m)
  READ T  <- T  geqrf_dtsqrt(k, m)   [type = LITTLE_T]

    /* Priority */
; (descA1.mt-k)*(descA1.mt-n)*(descA1.mt-n)

BODY [type=CUDA device=inline_c %{ return n; %}]
{
    double *WORK, *WORKC;
    int tempmm = (m == (descA2.mt-1)) ? (descA2.m- m * descA2.mb) : descA2.mb;
    int tempnn = (n == (descA2.nt-1)) ? (descA2.n- n * descA2.nb) : descA2.nb;
    int ldak = BLKLDD( descA1, k );
    int ldam = BLKLDD( descA2, m );

    WORK  = dague_gpu_pop_workspace(gpu_device, gpu_stream, descA2.nb * ib * sizeof(double));
    WORKC = dague_gpu_pop_workspace(gpu_device, gpu_stream, descA2.mb * ib * sizeof(double));

    dplasma_cuda_dtsmqr( PlasmaLeft, PlasmaTrans,
                         descA1.mb, tempnn, tempmm, tempnn, descA2.nb, ib,
                         A1 /* dataA1(k,n) */, ldak,
                         A2 /* dataA2(m,n) */, ldam,
                         V  /* dataA2(m,k) */, ldam,
                         T  /* dataT2(m,k) */, descT2.mb,
                         WORK,  ib,
                         WORKC, descA2.mb,
                         dague_body.stream );
}
END

BODY [type=RECURSIVE]
{
    int tempmm = (m == (descA2.mt-1)) ? (descA2.m- m * descA2.mb) : descA2.mb;
    int tempnn = (n == (descA2.nt-1)) ? (descA2.n- n * descA2.nb) : descA2.nb;
    int ldak = BLKLDD( descA1, k );
    int ldam = BLKLDD( descA2, m );

    if (tempmm > smallnb) {
        subtile_desc_t *small_descA1;
        subtile_desc_t *small_descA2;
        subtile_desc_t *small_descV;
        subtile_desc_t *small_descT;
        dague_handle_t *dague_dtsmqr;


        small_descA1 = subtile_desc_create( &(descA1), k, n,
                                            dague_imin(descA1.mb, ldak), smallnb,
                                            0, 0, descA1.mb, tempnn );
        small_descA2 = subtile_desc_create( &(descA2), m, n,
                                            dague_imin(descA2.mb, ldam), smallnb,
                                            0, 0, tempmm, tempnn );
        small_descV  = subtile_desc_create( &(descA2), m, k,
                                            dague_imin(descA2.mb, ldam), smallnb,
                                            0, 0, tempmm, descA2.nb );
        small_descT  = subtile_desc_create( &(descT2), m, k,
                                            ib, smallnb,
                                            0, 0, ib, descA2.nb );

        small_descA1->mat = A1;
        small_descA2->mat = A2;
        small_descV->mat  = V;
        small_descT->mat  = T;

        /* dague_object */
        dague_dtsmqr = dplasma_dgeqrfr_tsmqr_New( (tiled_matrix_desc_t *)small_descA1,
                                                  (tiled_matrix_desc_t *)small_descA2,
                                                  (tiled_matrix_desc_t *)small_descV,
                                                  (tiled_matrix_desc_t *)small_descT,
                                                  p_work );

        /* recursive call */
        dague_recursivecall( context, (dague_execution_context_t*)this_task,
                             dague_dtsmqr, dplasma_dgeqrfr_tsmqr_Destruct,
                             4, small_descA1, small_descA2, small_descV, small_descT );

        return DAGUE_HOOK_RETURN_ASYNC;
    }
    else
        return DAGUE_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempmm = (m == (descA2.mt-1)) ? (descA2.m - m * descA2.mb) : descA2.mb;
    int tempnn = (n == (descA2.nt-1)) ? (descA2.n - n * descA2.nb) : descA2.nb;
    int ldak = BLKLDD( descA1, k );
    int ldam = BLKLDD( descA2, m );
    int ldwork = ib;

#if !defined(DAGUE_DRY_RUN)
    void *p_elem_A = dague_private_memory_pop( p_work );

    CORE_dtsmqr(PlasmaLeft, PlasmaTrans,
                descA1.mb, tempnn, tempmm, tempnn, descA1.nb, ib,
                A1 /* dataA1(k,n) */, ldak,
                A2 /* dataA2(m,n) */, ldam,
                V  /* dataA2(m,k) */, ldam,
                T  /* dataT2(m,k) */, descT2.mb,
                p_elem_A, ldwork );

    dague_private_memory_push( p_work, p_elem_A );

#endif  /* !defined(DAGUE_DRY_RUN) */
}
END
